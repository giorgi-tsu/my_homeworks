# დავალება 6

# შემსრულებელი: გიორგი ცუცქირიძე

# ეს დავალება მოგვცეს მეექვსე ლექციაზე, რომელიც ჩატარდა 20231214-ში
# და დავალების ჩაბარების ბოლო ვადაა 20231221.

#******************************************************************#

## სავარჯიშო 1

# შექმენი ფუნქცია, რომელიც მომხმარებლისგან მიღებულ ინფორმაციას გაასამმაგებს
# და დაბეჭდავს შემდეგნაირად:

# input: “ablabdabdab“
# Output: Tripled: ablabdabdabablabdabdabablabdabdab

def tripler(text):
    print(f"input: \"{text}\"\nOutput: Tripled: \"{text*3}\"")

tripler("abc")

# იმ შემთხვევაში, თუ პროგრამამ მომხმარებელს უნდა სთხოვოს ინფორმაციის შეყვანა,
# რომელსაც შემდეგ ფუნქციას გადასცემს, მაშინ მას ექნება სახე:

# ფუნქციის გამოცხადება

def tripler(text):
    print(f"input: \"{text}\"\nOutput: Tripled: \"{text*3}\"")

# შემოწმება

text = input("Enter text that you want to triple: ")
tripler(text)


# როგორც მახსოვს წინა ლექციაზე საუბარი იყო, რომ როდესაც ფუნქციასთან ვხმარობთ
# სიტყვა დაბეჭდვას, მაშინ ვგულისხმობთ return-ს. თუ ასე მივუდგებით ამ ამოცანას 
# მაშინ გვექნება შემდეგნაირი ამოსნა:

# ეს გვექნება იმ შემთხვევაში, როდესაც გვინდა, რომ ფფუნქციამ დაგვიბრუნოს შედეგი
# რომელიც შეიძლება შევინახოთ ცვლადში მაგალთად ან პირდაპირ დავბეჭდოთ. წინა
# შემთხვევებში ფუნქცია დააბრუნებს None-ს.

# ფუნქციის გამოცხადება

def tripler(text):
    return f"input: \"{text}\"\nOutput: Tripled: \"{text*3}\""

# შემოწმება

print(tripler("abc"))

#------------------------------------------------------------------#

## სავარჯიშო 2

# შექმენი ფუნქცია, რომელიც მიიღებს მომხმარებლის წონას და დააბრუნებს 
# მის წონას მთვარეზე. (მთვარის გრავიტაცია 6_ჯერ ნაკლებია დედამიწისაზე).

# ფუნქციის გამოცხადება

def weight_on_moon(weight):
    weight_on_moon = weight/6 
    return weight_on_moon

# შემოწმება

print(weight_on_moon(60))

#------------------------------------------------------------------#

## სავარჯიშო 3

# შექმენი კალკულატორის ფუნქცია, რომელიც მიიღებს გამოსახულებას
# მომხმარებლისგან input() ფუნქციის დახმარებით (სამ მონაცემს _ პირველ რიცხვს,
# მოქმედებას (+ - * / ^), მეორე რიცხვს)
# მაგ. „2 * 6“. ფუნქცია დაშლის სტრიქონს split() ფუნქციის გამოყენებით. 
# დათვლის და დააბრუნებს შედეგს. გაითვალისწინე, რომ რიცხვის შეყვანის
# მაგიერ სიმბოლოების შეყვანის შემთხვევაში უნდა დააბრუნოს ფუნქციამ
# შესაბამისი მესიჯი. ასევე ნულზე გაყოფა არ შეიძლება, ამ შემთხვევაშიც
# უნდა დააბრუნოს შესაბამისი მესიჯი. (დააბრუნოს და არა დაპრინტოს)

# ფუნქციის გამოცხადება

def calculator():

    input_str = input("Enter your expression (example of valid"
                       " expression: 2 * 6): ")
    input_list = input_str.split()

    # თუ შეყვანილი გამოსახულება ვერ დაშალა 3 ნაწილად ცარიელ ადგილებზე,
    # მაშინ დააბრუნებს ქვემოთ ბლოკში არებულ გამოსახულებას.

    if len(input_list) != 3:
        return "Enter expression correctly! first number, "\
    "space, operation symbol(+, -, *, /, ^), space, second number)"

    # თუ შეყვანილი გამოსახულება დაშალა 3 ნაწილად ცარიელ ადგილზე, მაშინ
    # დაიწყებს და სათითაოდ შეამოწმებს პირველ მეორე და მესამე ელემენტს.

    # ჯერ შეამოწმებს პირველი და მესამე ელემენტი არის თუ არა რიცხვი.

    try:
        number_1 = float(input_list[0])
    except ValueError:
        return "First element is not a number!"

    try:
        number_2 = float(input_list[2])
    except ValueError:
        return "Second element is not a number!"

    # თუ შეყვანილი გამოსახულება დაიშალა 3 ნაწილად და პირველი და მესამე
    # ელემენტი არი რიცხვი, მაშინ შეამოწმებს მეორე ელემენტი არი თუ არა 
    # დასაშვები ოპერაციის სიმბოლო. თუ არის შეასრულებს შესაბამის ოპერაციას, 
    # ხოლო თუ არა მაშინ გამოიტანს შესაბამის შეტყობინებას.

    if input_list[1] == "+":
        return number_1 + number_2
    elif input_list[1] == "-":
        return number_1 - number_2
    elif input_list[1] == "*":
        return number_1 * number_2
    elif input_list[1] == "/":

        if input_list[2] == "0":
            return "Division by 0 is not allowed!"
        else:
            return number_1 / number_2

    elif input_list[1] == "^":
        return number_1 ** number_2
    else:
        return "Enter valid operation symbol (+, -, *, /, ^)"

# შემოწმება

calculator()

#------------------------------------------------------------------#

## სავარჯიშო 4

# არასავალდებულო:
# გავლილი მასალის გამოყენებით შექმენი ფუნქცია, რომელიც მიიღებს ლათინური
# სიმბოლოებით დაწერილ სიტყვას, დაშიფრავს მორწეს ანბანით და დააბრუნებს 
# შედეგს.

def word_to_morse_code(word):
    
# ეს ლექსიკონი ინტერნეტში ვიპოვე და იქედან დავაკოპირე. ამის აკრებას
# ან if-else-ებით ამის წერას დიდხანს მოვუნდებოდი. ამგვარი 
# პრობლემების გადასაჭრელად ე.წ. mapping-ის ლექსიკონში გაწერა
# ყველაზე ოპტიმალური გადაწყვეტაა ჩემი აზრით.

    morse_dict = {
        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.',
        'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---',
        'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---',
        'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-',
        'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
        'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----',
        '2': '..---', '3': '...--', '4': '....-', '5': '.....',
        '6': '-....', '7': '--...', '8': '---..', '9': '----.',
        '.': '.-.-.-', ',': '--..--','?': '..--..', "'": '.----.',
        '!': '-.-.--', '/': '-..-.', '(': '-.--.', ')': '-.--.-',
        '&': '.-...',':': '---...', ';': '-.-.-.', '=': '-...-',
        '+': '.-.-.', '-': '-....-', '_': '..--.-', '"': '.-..-.',
        '$': '...-..-', '@': '.--.-.', ' ': '/'
    }

# როგორც გავარკვიე მორზეს კოდში სიმბოლოები ერთმანეთისგან
# გამოყოფილია 1 ცარიელი სიმბოლოთი (" "), ხოლო სიტყვები
# ერთმანეთისგან გამოყოფილია "/"_ით 
# (ეს გაწერილია ლექსიკონში ზემოთ), სხვაგვარად ეს ნიშნავს, რომ
# ერთი ცარიელი სივრცე მორზეს კოდში ითარგმენბა როგორც "/"

    morse_word = ""
    for char in word.upper():
        if char in morse_dict:
            morse_word += morse_dict[char] + " "
        else:
            return f"{char} is not in my morse dictionary, Sorry!"
    return morse_word.rstrip()
    
# შემოწმება

word_to_morse_code("Gio ც")

#------------------------------------------------------------------#